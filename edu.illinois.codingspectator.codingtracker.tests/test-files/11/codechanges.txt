l1300568807937#f/edu.illinois.test/src/edu/illinois/test/BaseClass.java#package edu.illinois.test;

import java.util.LinkedList;
import java.util.List;

public class BaseClass {

	public void method1(){
		int myInteger=5;
		long myLong= 1000;
		List<String> myStringList = new LinkedList<String>();
		String elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);
		System.out.println("Element=" + myStringList.get(0));
	}
	
}
#1300568864140#D398#org.eclipse.jdt.core.builder.cleanOutputFolder#clean#org.eclipse.jdt.core.builder.duplicateResourceTask#warning#org.eclipse.jdt.core.builder.invalidClasspath#abort#org.eclipse.jdt.core.builder.recreateModifiedClassFileInOutputFolder#ignore#org.eclipse.jdt.core.builder.resourceCopyExclusionFilter#*.launch#org.eclipse.jdt.core.circularClasspath#error#org.eclipse.jdt.core.classpath.exclusionPatterns#enabled#org.eclipse.jdt.core.classpath.multipleOutputLocations#enabled#org.eclipse.jdt.core.codeComplete.argumentPrefixes##org.eclipse.jdt.core.codeComplete.argumentSuffixes##org.eclipse.jdt.core.codeComplete.camelCaseMatch#enabled#org.eclipse.jdt.core.codeComplete.deprecationCheck#disabled#org.eclipse.jdt.core.codeComplete.discouragedReferenceCheck#disabled#org.eclipse.jdt.core.codeComplete.fieldPrefixes##org.eclipse.jdt.core.codeComplete.fieldSuffixes##org.eclipse.jdt.core.codeComplete.forbiddenReferenceCheck#enabled#org.eclipse.jdt.core.codeComplete.forceImplicitQualification#disabled#org.eclipse.jdt.core.codeComplete.localPrefixes##org.eclipse.jdt.core.codeComplete.localSuffixes##org.eclipse.jdt.core.codeComplete.staticFieldPrefixes##org.eclipse.jdt.core.codeComplete.staticFieldSuffixes##org.eclipse.jdt.core.codeComplete.staticFinalFieldPrefixes##org.eclipse.jdt.core.codeComplete.staticFinalFieldSuffixes##org.eclipse.jdt.core.codeComplete.suggestStaticImports#enabled#org.eclipse.jdt.core.codeComplete.visibilityCheck#enabled#org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode#enabled#org.eclipse.jdt.core.compiler.codegen.targetPlatform#1.6#org.eclipse.jdt.core.compiler.codegen.unusedLocal#preserve#org.eclipse.jdt.core.compiler.compliance#1.6#org.eclipse.jdt.core.compiler.debug.lineNumber#generate#org.eclipse.jdt.core.compiler.debug.localVariable#generate#org.eclipse.jdt.core.compiler.debug.sourceFile#generate#org.eclipse.jdt.core.compiler.doc.comment.support#enabled#org.eclipse.jdt.core.compiler.generateClassFiles#enabled#org.eclipse.jdt.core.compiler.maxProblemPerUnit#100#org.eclipse.jdt.core.compiler.problem.annotationSuperInterface#warning#org.eclipse.jdt.core.compiler.problem.assertIdentifier#error#org.eclipse.jdt.core.compiler.problem.autoboxing#ignore#org.eclipse.jdt.core.compiler.problem.comparingIdentical#warning#org.eclipse.jdt.core.compiler.problem.deadCode#warning#org.eclipse.jdt.core.compiler.problem.deadCodeInTrivialIfStatement#disabled#org.eclipse.jdt.core.compiler.problem.deprecation#warning#org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode#disabled#org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod#disabled#org.eclipse.jdt.core.compiler.problem.discouragedReference#warning#org.eclipse.jdt.core.compiler.problem.emptyStatement#ignore#org.eclipse.jdt.core.compiler.problem.enumIdentifier#error#org.eclipse.jdt.core.compiler.problem.fallthroughCase#ignore#org.eclipse.jdt.core.compiler.problem.fatalOptionalError#disabled#org.eclipse.jdt.core.compiler.problem.fieldHiding#ignore#org.eclipse.jdt.core.compiler.problem.finalParameterBound#warning#org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally#warning#org.eclipse.jdt.core.compiler.problem.forbiddenReference#error#org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock#warning#org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod#warning#org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch#ignore#org.eclipse.jdt.core.compiler.problem.indirectStaticAccess#ignore#org.eclipse.jdt.core.compiler.problem.invalidImport#error#org.eclipse.jdt.core.compiler.problem.invalidJavadoc#ignore#org.eclipse.jdt.core.compiler.problem.invalidJavadocTags#disabled#org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsDeprecatedRef#disabled#org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsNotVisibleRef#disabled#org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsVisibility#public#org.eclipse.jdt.core.compiler.problem.localVariableHiding#ignore#org.eclipse.jdt.core.compiler.problem.methodWithConstructorName#warning#org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation#ignore#org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod#ignore#org.eclipse.jdt.core.compiler.problem.missingJavadocComments#ignore#org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding#disabled#org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsVisibility#public#org.eclipse.jdt.core.compiler.problem.missingJavadocTagDescription#return_tag#org.eclipse.jdt.core.compiler.problem.missingJavadocTags#ignore#org.eclipse.jdt.core.compiler.problem.missingJavadocTagsOverriding#disabled#org.eclipse.jdt.core.compiler.problem.missingJavadocTagsVisibility#public#org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation#ignore#org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation#enabled#org.eclipse.jdt.core.compiler.problem.missingSerialVersion#warning#org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod#ignore#org.eclipse.jdt.core.compiler.problem.noEffectAssignment#warning#org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion#warning#org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral#ignore#org.eclipse.jdt.core.compiler.problem.nullReference#warning#org.eclipse.jdt.core.compiler.problem.overridingMethodWithoutSuperInvocation#ignore#org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod#warning#org.eclipse.jdt.core.compiler.problem.parameterAssignment#ignore#org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment#ignore#org.eclipse.jdt.core.compiler.problem.potentialNullReference#ignore#org.eclipse.jdt.core.compiler.problem.rawTypeReference#warning#org.eclipse.jdt.core.compiler.problem.redundantNullCheck#ignore#org.eclipse.jdt.core.compiler.problem.redundantSuperinterface#ignore#org.eclipse.jdt.core.compiler.problem.specialParameterHidingField#disabled#org.eclipse.jdt.core.compiler.problem.staticAccessReceiver#warning#org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors#disabled#org.eclipse.jdt.core.compiler.problem.suppressWarnings#enabled#org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation#ignore#org.eclipse.jdt.core.compiler.problem.tasks#warning#org.eclipse.jdt.core.compiler.problem.typeParameterHiding#warning#org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation#warning#org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock#ignore#org.eclipse.jdt.core.compiler.problem.unhandledWarningToken#warning#org.eclipse.jdt.core.compiler.problem.unnecessaryElse#ignore#org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck#ignore#org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess#ignore#org.eclipse.jdt.core.compiler.problem.unreachableCode#error#org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException#ignore#org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable#enabled#org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference#enabled#org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding#disabled#org.eclipse.jdt.core.compiler.problem.unusedImport#warning#org.eclipse.jdt.core.compiler.problem.unusedLabel#warning#org.eclipse.jdt.core.compiler.problem.unusedLocal#warning#org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation#ignore#org.eclipse.jdt.core.compiler.problem.unusedParameter#ignore#org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference#enabled#org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract#disabled#org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete#disabled#org.eclipse.jdt.core.compiler.problem.unusedPrivateMember#warning#org.eclipse.jdt.core.compiler.problem.unusedTypeArgumentsForMethodInvocation#warning#org.eclipse.jdt.core.compiler.problem.unusedWarningToken#warning#org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast#warning#org.eclipse.jdt.core.compiler.processAnnotations#disabled#org.eclipse.jdt.core.compiler.source#1.6#org.eclipse.jdt.core.compiler.taskCaseSensitive#enabled#org.eclipse.jdt.core.compiler.taskPriorities#NORMAL,HIGH,NORMAL#org.eclipse.jdt.core.compiler.taskTags#TODO,FIXME,XXX#org.eclipse.jdt.core.computeJavaBuildOrder#ignore#org.eclipse.jdt.core.encoding#UTF-8#org.eclipse.jdt.core.formatter.align_type_members_on_columns#false#org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression#16#org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation#0#org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant#16#org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call#16#org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation#16#org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression#16#org.eclipse.jdt.core.formatter.alignment_for_assignment#0#org.eclipse.jdt.core.formatter.alignment_for_binary_expression#16#org.eclipse.jdt.core.formatter.alignment_for_compact_if#16#org.eclipse.jdt.core.formatter.alignment_for_conditional_expression#80#org.eclipse.jdt.core.formatter.alignment_for_enum_constants#0#org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer#16#org.eclipse.jdt.core.formatter.alignment_for_method_declaration#0#org.eclipse.jdt.core.formatter.alignment_for_multiple_fields#16#org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration#16#org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration#0#org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation#16#org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration#16#org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration#16#org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration#16#org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration#16#org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration#16#org.eclipse.jdt.core.formatter.blank_lines_after_imports#1#org.eclipse.jdt.core.formatter.blank_lines_after_package#1#org.eclipse.jdt.core.formatter.blank_lines_before_field#0#org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration#0#org.eclipse.jdt.core.formatter.blank_lines_before_imports#1#org.eclipse.jdt.core.formatter.blank_lines_before_member_type#1#org.eclipse.jdt.core.formatter.blank_lines_before_method#1#org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk#1#org.eclipse.jdt.core.formatter.blank_lines_before_package#0#org.eclipse.jdt.core.formatter.blank_lines_between_import_groups#1#org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations#1#org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration#end_of_line#org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration#end_of_line#org.eclipse.jdt.core.formatter.brace_position_for_array_initializer#end_of_line#org.eclipse.jdt.core.formatter.brace_position_for_block#end_of_line#org.eclipse.jdt.core.formatter.brace_position_for_block_in_case#end_of_line#org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration#end_of_line#org.eclipse.jdt.core.formatter.brace_position_for_enum_constant#end_of_line#org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration#end_of_line#org.eclipse.jdt.core.formatter.brace_position_for_method_declaration#end_of_line#org.eclipse.jdt.core.formatter.brace_position_for_switch#end_of_line#org.eclipse.jdt.core.formatter.brace_position_for_type_declaration#end_of_line#org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment#false#org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment#false#org.eclipse.jdt.core.formatter.comment.format_block_comments#true#org.eclipse.jdt.core.formatter.comment.format_header#false#org.eclipse.jdt.core.formatter.comment.format_html#true#org.eclipse.jdt.core.formatter.comment.format_javadoc_comments#true#org.eclipse.jdt.core.formatter.comment.format_line_comments#true#org.eclipse.jdt.core.formatter.comment.format_source_code#true#org.eclipse.jdt.core.formatter.comment.indent_parameter_description#true#org.eclipse.jdt.core.formatter.comment.indent_root_tags#true#org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags#insert#org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter#insert#org.eclipse.jdt.core.formatter.comment.line_length#80#org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries#true#org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries#true#org.eclipse.jdt.core.formatter.compact_else_if#true#org.eclipse.jdt.core.formatter.continuation_indentation#2#org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer#2#org.eclipse.jdt.core.formatter.disabling_tag#@formatter:off#org.eclipse.jdt.core.formatter.enabling_tag#@formatter:on#org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line#false#org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column#true#org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header#true#org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header#true#org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header#true#org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header#true#org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases#true#org.eclipse.jdt.core.formatter.indent_empty_lines#false#org.eclipse.jdt.core.formatter.indent_statements_compare_to_block#true#org.eclipse.jdt.core.formatter.indent_statements_compare_to_body#true#org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases#true#org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch#false#org.eclipse.jdt.core.formatter.indentation.size#4#org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable#insert#org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_member#insert#org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter#do not insert#org.eclipse.jdt.core.formatter.insert_new_line_after_label#do not insert#org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer#do not insert#org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing#do not insert#org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement#do not insert#org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer#do not insert#org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement#do not insert#org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement#do not insert#org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement#do not insert#org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration#insert#org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration#insert#org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block#insert#org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant#insert#org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration#insert#org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body#insert#org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration#insert#org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter#insert#org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator#insert#org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_binary_operator#insert#org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments#insert#org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters#insert#org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block#insert#org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast#insert#org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert#insert#org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case#insert#org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional#insert#org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for#insert#org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments#insert#org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters#insert#org.eclipse.jdt.core.formatter.insert_space_after_ellipsis#insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer#insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional#insert#org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard#do not insert#org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for#insert#org.eclipse.jdt.core.formatter.insert_space_after_unary_operator#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter#insert#org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator#insert#org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration#insert#org.eclipse.jdt.core.formatter.insert_space_before_binary_operator#insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer#insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert#insert#org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional#insert#org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for#insert#org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_ellipsis#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized#insert#org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while#insert#org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return#insert#org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw#insert#org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional#insert#org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_semicolon#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for#do not insert#org.eclipse.jdt.core.formatter.insert_space_before_unary_operator#do not insert#org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference#do not insert#org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer#do not insert#org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression#do not insert#org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration#do not insert#org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration#do not insert#org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant#do not insert#org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration#do not insert#org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation#do not insert#org.eclipse.jdt.core.formatter.join_lines_in_comments#true#org.eclipse.jdt.core.formatter.join_wrapped_lines#true#org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line#false#org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line#false#org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line#false#org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line#false#org.eclipse.jdt.core.formatter.lineSplit#80#org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column#false#org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column#false#org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body#0#org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve#1#org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line#true#org.eclipse.jdt.core.formatter.tabulation.char#tab#org.eclipse.jdt.core.formatter.tabulation.size#4#org.eclipse.jdt.core.formatter.use_on_off_tags#false#org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations#false#org.eclipse.jdt.core.formatter.wrap_before_binary_operator#true#org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested#true#org.eclipse.jdt.core.incompatibleJDKLevel#ignore#org.eclipse.jdt.core.incompleteClasspath#error#org.eclipse.jdt.core.timeoutForParameterNameFromAttachedJavadoc#50#1300568864343#Eedu.illinois.test#6#org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode#enabled#org.eclipse.jdt.core.compiler.codegen.targetPlatform#1.6#org.eclipse.jdt.core.compiler.compliance#1.6#org.eclipse.jdt.core.compiler.problem.assertIdentifier#error#org.eclipse.jdt.core.compiler.problem.enumIdentifier#error#org.eclipse.jdt.core.compiler.source#1.6#1300568864359#b1300568864375#e/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300568864421#t#
		return myStringList;
	}#395#0#1300568864437#t#List<String> myStringList = new LinkedList<String>();#395#0#1300568864453#t#
	private List<String> noArgumentsMethod() {
		#395#0#1300568864453#t#/**
	 * @return
	 */#395#0#1300568864468#t#

	#395#0#1300568864468#tList<String> myStringList = new LinkedList<String>();##183#53#1300568864500#t##183#0#1300568864500#t#List<String> myStringList = noArgumentsMethod();#183#0#1300568864515#a/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300568864718#porg.eclipse.jdt.ui.extract.method#edu.illinois.test#786434#9#comments#true#destination#0#exceptions#false#input#/src<edu.illinois.test{BaseClass.java#name#noArgumentsMethod#replace#false#selection#181 57#version#1.0#visibility#2#1300568864765#t/**
	 * @return
	 */
	private List<String> noArgumentsMethod() {
		List<String> myStringList = new LinkedList<String>();
		return myStringList;
	}##395#152#1300568874031#h#/**
	 * @return
	 */
	private List<String> noArgumentsMethod() {
		List<String> myStringList = new LinkedList<String>();
		return myStringList;
	}#395#0#1300568877203#b1300568877796#hList<String> myStringList = noArgumentsMethod();##183#48#1300568877984#h##183#0#1300568877984#h#List<String> myStringList = new LinkedList<String>();#183#0#1300568878000#h

	##395#5#1300568878015#h/**
	 * @return
	 */##395#22#1300568878031#h
	private List<String> noArgumentsMethod() {
		##395#49#1300568878046#hList<String> myStringList = new LinkedList<String>();##395#53#1300568878062#h
		return myStringList;
	}##395#28#1300568878062#h##0#0#1300568878078#a/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300568878125#uorg.eclipse.jdt.ui.extract.method#edu.illinois.test#786434#9#comments#true#destination#0#exceptions#false#input#/src<edu.illinois.test{BaseClass.java#name#noArgumentsMethod#replace#false#selection#181 57#version#1.0#visibility#2#1300568864765#b1300568910968#t#
	}#395#0#1300568910984#t#System.out.println("Element=" + myStringList.get(0));#395#0#1300568910984#t#private void oneArgumentMethod(List<String> myStringList) {
		#395#0#1300568911000#t#

	#395#0#1300568911000#tSystem.out.println("Element=" + myStringList.get(0));##338#53#1300568911015#t##338#0#1300568911015#t#oneArgumentMethod(myStringList);#338#0#1300568911031#a/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300568911125#porg.eclipse.jdt.ui.extract.method#edu.illinois.test#786434#10#comments#false#destination#0#exceptions#true#input#/src<edu.illinois.test{BaseClass.java#name#oneArgumentMethod#parameter1#List<String> myStringList myStringList#replace#false#selection#336 55#version#1.0#visibility#2#1300568911125#t	}

	private void oneArgumentMethod(List<String> myStringList) {
		System.out.println("Element=" + myStringList.get(0));
	}##372#127#1300568915875#h#	}

	private void oneArgumentMethod(List<String> myStringList) {
		System.out.println("Element=" + myStringList.get(0));
	}#372#0#1300568916859#b1300568918312#honeArgumentMethod(myStringList);##338#32#1300568918328#h##338#0#1300568918343#h#System.out.println("Element=" + myStringList.get(0));#338#0#1300568918359#h

	##395#5#1300568918375#hprivate void oneArgumentMethod(List<String> myStringList) {
		##395#63#1300568918390#hSystem.out.println("Element=" + myStringList.get(0));##395#53#1300568918406#h
	}##395#4#1300568918406#h##0#0#1300568918421#a/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300568918484#uorg.eclipse.jdt.ui.extract.method#edu.illinois.test#786434#10#comments#false#destination#0#exceptions#true#input#/src<edu.illinois.test{BaseClass.java#name#oneArgumentMethod#parameter1#List<String> myStringList myStringList#replace#false#selection#336 55#version#1.0#visibility#2#1300568911125#b1300568968421#t#
	}#395#0#1300568968437#t#String elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);#395#0#1300568968437#t#private void multipleArgumentsMethod(int myInteger, long myLong, List<String> myStringList) {
		#395#0#1300568968453#t#

	#395#0#1300568968453#tString elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);##240#94#1300568968468#t##240#0#1300568968468#t#multipleArgumentsMethod(myInteger, myLong, myStringList);#240#0#1300568968484#a/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300568968562#porg.eclipse.jdt.ui.extract.method#edu.illinois.test#786434#12#comments#false#destination#0#exceptions#false#input#/src<edu.illinois.test{BaseClass.java#name#multipleArgumentsMethod#parameter1#int myInteger myInteger#parameter2#long myLong myLong#parameter3#List<String> myStringList myStringList#replace#false#selection#238 96#version#1.0#visibility#2#1300568968578#t	}

	private void multipleArgumentsMethod(int myInteger, long myLong, List<String> myStringList) {
		String elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);
	}##356#202#1300568972515#h#	}

	private void multipleArgumentsMethod(int myInteger, long myLong, List<String> myStringList) {
		String elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);
	}#356#0#1300568973265#b1300568974312#hmultipleArgumentsMethod(myInteger, myLong, myStringList);##240#57#1300568974328#h##240#0#1300568974343#h#String elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);#240#0#1300568974359#h

	##395#5#1300568974375#hprivate void multipleArgumentsMethod(int myInteger, long myLong, List<String> myStringList) {
		##395#97#1300568974375#hString elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);##395#94#1300568974390#h
	}##395#4#1300568974406#h##0#0#1300568974406#a/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300568974437#uorg.eclipse.jdt.ui.extract.method#edu.illinois.test#786434#12#comments#false#destination#0#exceptions#false#input#/src<edu.illinois.test{BaseClass.java#name#multipleArgumentsMethod#parameter1#int myInteger myInteger#parameter2#long myLong myLong#parameter3#List<String> myStringList myStringList#replace#false#selection#238 96#version#1.0#visibility#2#1300568968578#b1300568998890#t#
	}#395#0#1300568998906#t#String elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);#395#0#1300568998906#t#private void multipleArgumentsReorderMethod(List<String> myStringList, long myLong, int myInteger) {
		#395#0#1300568998921#t#

	#395#0#1300568998921#tString elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);##240#94#1300568998937#t##240#0#1300568998937#t#multipleArgumentsReorderMethod(myStringList, myLong, myInteger);#240#0#1300568998953#a/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300568999015#porg.eclipse.jdt.ui.extract.method#edu.illinois.test#786434#12#comments#false#destination#0#exceptions#false#input#/src<edu.illinois.test{BaseClass.java#name#multipleArgumentsReorderMethod#parameter1#List<String> myStringList myStringList#parameter2#long myLong myLong#parameter3#int myInteger myInteger#replace#false#selection#238 96#version#1.0#visibility#2#1300568999031#t	}

	private void multipleArgumentsReorderMethod(List<String> myStringList, long myLong, int myInteger) {
		String elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);
	}
	##363#212#1300569005125#h#	}

	private void multipleArgumentsReorderMethod(List<String> myStringList, long myLong, int myInteger) {
		String elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);
	}
	#363#0#1300569006406#b1300569007359#hmultipleArgumentsReorderMethod(myStringList, myLong, myInteger);##240#64#1300569007375#h##240#0#1300569007375#h#String elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);#240#0#1300569007406#h

	##395#5#1300569007406#hprivate void multipleArgumentsReorderMethod(List<String> myStringList, long myLong, int myInteger) {
		##395#104#1300569007421#hString elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);##395#94#1300569007437#h
	}##395#4#1300569007437#h##0#0#1300569007453#a/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300569007515#uorg.eclipse.jdt.ui.extract.method#edu.illinois.test#786434#12#comments#false#destination#0#exceptions#false#input#/src<edu.illinois.test{BaseClass.java#name#multipleArgumentsReorderMethod#parameter1#List<String> myStringList myStringList#parameter2#long myLong myLong#parameter3#int myInteger myInteger#replace#false#selection#238 96#version#1.0#visibility#2#1300568999031#b1300569041343#t#
	}#395#0#1300569041359#t#String elementString = String.valueOf(integerNumber) + longNumber;
		stringList.add(elementString);#395#0#1300569041359#t#private void multipleArgumentsRenameMethod(int integerNumber, long longNumber, List<String> stringList) {
		#395#0#1300569041375#t#

	#395#0#1300569041375#tString elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);##240#94#1300569041390#t##240#0#1300569041390#t#multipleArgumentsRenameMethod(myInteger, myLong, myStringList);#240#0#1300569041406#a/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300569041437#porg.eclipse.jdt.ui.extract.method#edu.illinois.test#786434#12#comments#false#destination#0#exceptions#false#input#/src<edu.illinois.test{BaseClass.java#name#multipleArgumentsRenameMethod#parameter1#int integerNumber myInteger#parameter2#long longNumber myLong#parameter3#List<String> stringList myStringList#replace#false#selection#238 96#version#1.0#visibility#2#1300569041453#t	}

	private void multipleArgumentsRenameMethod(int integerNumber, long longNumber, List<String> stringList) {
		String elementString = String.valueOf(integerNumber) + longNumber;
		stringList.add(elementString);
	}##362#220#1300569046093#h#	}

	private void multipleArgumentsRenameMethod(int integerNumber, long longNumber, List<String> stringList) {
		String elementString = String.valueOf(integerNumber) + longNumber;
		stringList.add(elementString);
	}#362#0#1300569046812#b1300569047984#hmultipleArgumentsRenameMethod(myInteger, myLong, myStringList);##240#63#1300569048000#h##240#0#1300569048000#h#String elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);#240#0#1300569048015#h

	##395#5#1300569048031#hprivate void multipleArgumentsRenameMethod(int integerNumber, long longNumber, List<String> stringList) {
		##395#109#1300569048046#hString elementString = String.valueOf(integerNumber) + longNumber;
		stringList.add(elementString);##395#100#1300569048062#h
	}##395#4#1300569048062#h##0#0#1300569048078#a/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300569048125#uorg.eclipse.jdt.ui.extract.method#edu.illinois.test#786434#12#comments#false#destination#0#exceptions#false#input#/src<edu.illinois.test{BaseClass.java#name#multipleArgumentsRenameMethod#parameter1#int integerNumber myInteger#parameter2#long longNumber myLong#parameter3#List<String> stringList myStringList#replace#false#selection#238 96#version#1.0#visibility#2#1300569041453#b1300569125718#t#
	}#395#0#1300569125750#t#String elementString = String.valueOf(integerNum) + longNum;
		stringList.add(elementString);#395#0#1300569125750#t#public void multipleArgumentsReorderAndRenameMethod(int integerNum, List<String> stringList, long longNum) {
		#395#0#1300569125765#t#

	#395#0#1300569125765#tString elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);##240#94#1300569125781#t##240#0#1300569125781#t#multipleArgumentsReorderAndRenameMethod(myInteger, myStringList, myLong);#240#0#1300569125796#a/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300569125875#porg.eclipse.jdt.ui.extract.method#edu.illinois.test#786434#12#comments#false#destination#0#exceptions#false#input#/src<edu.illinois.test{BaseClass.java#name#multipleArgumentsReorderAndRenameMethod#parameter1#int integerNum myInteger#parameter2#List<String> stringList myStringList#parameter3#long longNum myLong#replace#false#selection#238 96#version#1.0#visibility#1#1300569125890#t	}

	public void multipleArgumentsReorderAndRenameMethod(int integerNum, List<String> stringList, long longNum) {
		String elementString = String.valueOf(integerNum) + longNum;
		stringList.add(elementString);
	}
	##372#220#1300569142531#h#	}

	public void multipleArgumentsReorderAndRenameMethod(int integerNum, List<String> stringList, long longNum) {
		String elementString = String.valueOf(integerNum) + longNum;
		stringList.add(elementString);
	}
	#372#0#1300569143265#b1300569143640#hmultipleArgumentsReorderAndRenameMethod(myInteger, myStringList, myLong);##240#73#1300569143656#h##240#0#1300569143671#h#String elementString = String.valueOf(myInteger) + myLong;
		myStringList.add(elementString);#240#0#1300569143687#h

	##395#5#1300569143703#hpublic void multipleArgumentsReorderAndRenameMethod(int integerNum, List<String> stringList, long longNum) {
		##395#112#1300569143703#hString elementString = String.valueOf(integerNum) + longNum;
		stringList.add(elementString);##395#94#1300569143718#h
	}##395#4#1300569143734#h##0#0#1300569143734#a/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300569143796#uorg.eclipse.jdt.ui.extract.method#edu.illinois.test#786434#12#comments#false#destination#0#exceptions#false#input#/src<edu.illinois.test{BaseClass.java#name#multipleArgumentsReorderAndRenameMethod#parameter1#int integerNum myInteger#parameter2#List<String> stringList myStringList#parameter3#long longNum myLong#replace#false#selection#238 96#version#1.0#visibility#1#1300569125890#c/edu.illinois.test/src/edu/illinois/test/BaseClass.java#1300569229921#