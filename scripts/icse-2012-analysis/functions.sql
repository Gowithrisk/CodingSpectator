--This file is licensed under the University of Illinois/NCSA Open Source License. See LICENSE.TXT for details.

/*
The following sections contain the functions that we are using. We are using a
SqlTool specific feature: Raw Mode
<http://hsqldb.org/doc/guide/ch08.html#raw-section>. The symbols "\." and ".;"
begin and end Raw Mode respectively.

Some of the sections are split artificially because SqlTool seems to have
problems with large amount of text in a single Raw Mode entry so we split the
text up.
*/

\.

DROP FUNCTION IS_ECLIPSE_PERFORMED IF EXISTS;
CREATE FUNCTION IS_ECLIPSE_PERFORMED(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'ECLIPSE' AND KIND = 'PERFORMED';
.;

\.

DROP FUNCTION IS_CODINGTRACKER_PERFORMED IF EXISTS;
CREATE FUNCTION IS_CODINGTRACKER_PERFORMED(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGTRACKER' AND KIND = 'PERFORMED';

DROP FUNCTION IS_CODINGTRACKER_UNDONE IF EXISTS;
CREATE FUNCTION IS_CODINGTRACKER_UNDONE(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGTRACKER' AND KIND = 'UNDONE';

DROP FUNCTION IS_CODINGTRACKER_REDONE IF EXISTS;
CREATE FUNCTION IS_CODINGTRACKER_REDONE(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGTRACKER' AND KIND = 'REDONE';
.;

\.

DROP FUNCTION IS_CODINGSPECTATOR_PERFORMED_WARNING_STATUS IF EXISTS;
DROP FUNCTION IS_CODINGSPECTATOR_PERFORMED_ERROR_STATUS IF EXISTS;
DROP FUNCTION IS_CODINGSPECTATOR_PERFORMED IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_PERFORMED(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGSPECTATOR' AND KIND = 'PERFORMED';

DROP FUNCTION IS_CODINGSPECTATOR_CANCELED_WARNING_STATUS IF EXISTS;
DROP FUNCTION IS_CODINGSPECTATOR_CANCELED_ERROR_STATUS IF EXISTS;
DROP FUNCTION IS_CODINGSPECTATOR_CANCELED_FATAL_STATUS IF EXISTS;
DROP FUNCTION IS_CODINGSPECTATOR_CANCELED IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_CANCELED(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGSPECTATOR' AND KIND = 'CANCELLED';

DROP FUNCTION IS_CODINGSPECTATOR_UNAVAILABLE IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_UNAVAILABLE(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGSPECTATOR' AND KIND = 'UNAVAILABLE';
.;

\.

DROP FUNCTION IS_CODINGSPECTATOR_PERFORMED_WARNING_STATUS IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_PERFORMED_WARNING_STATUS(RECORDER VARCHAR(100), KIND VARCHAR(100), STATUS VARCHAR(100000))
RETURNS BOOLEAN
CONTAINS SQL
RETURN IS_CODINGSPECTATOR_PERFORMED(RECORDER, KIND) AND STATUS LIKE '_WARNING%';

DROP FUNCTION IS_CODINGSPECTATOR_PERFORMED_ERROR_STATUS IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_PERFORMED_ERROR_STATUS(RECORDER VARCHAR(100), KIND VARCHAR(100), STATUS VARCHAR(100000))
RETURNS BOOLEAN
CONTAINS SQL
RETURN IS_CODINGSPECTATOR_PERFORMED(RECORDER, KIND) AND STATUS LIKE '_ERROR%';

.;

\.

DROP FUNCTION IS_CODINGSPECTATOR_CANCELED_WARNING_STATUS IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_CANCELED_WARNING_STATUS(RECORDER VARCHAR(100), KIND VARCHAR(100), STATUS VARCHAR(100000))
RETURNS BOOLEAN
CONTAINS SQL
RETURN IS_CODINGSPECTATOR_CANCELED(RECORDER, KIND) AND STATUS LIKE '_WARNING%';

DROP FUNCTION IS_CODINGSPECTATOR_CANCELED_ERROR_STATUS IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_CANCELED_ERROR_STATUS(RECORDER VARCHAR(100), KIND VARCHAR(100), STATUS VARCHAR(100000))
RETURNS BOOLEAN
CONTAINS SQL
RETURN IS_CODINGSPECTATOR_CANCELED(RECORDER, KIND) AND STATUS LIKE '_ERROR%';

DROP FUNCTION IS_CODINGSPECTATOR_CANCELED_FATAL_STATUS IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_CANCELED_FATAL_STATUS(RECORDER VARCHAR(100), KIND VARCHAR(100), STATUS VARCHAR(100000))
RETURNS BOOLEAN
CONTAINS SQL
RETURN IS_CODINGSPECTATOR_CANCELED(RECORDER, KIND) AND STATUS LIKE '_FATAL%';

.;

\.

DROP FUNCTION IS_JAVA_REFACTORING IF EXISTS;
CREATE FUNCTION IS_JAVA_REFACTORING(ID VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN ID <> 'org.eclipse.jdt.ui.copy' AND ID <> 'org.eclipse.jdt.ui.delete' AND ID LIKE '%jdt%';

DROP FUNCTION JAVA_REFACTORING_ID IF EXISTS;
CREATE FUNCTION JAVA_REFACTORING_ID(ID VARCHAR(100))
RETURNS VARCHAR(100)
CONTAINS SQL
RETURN
(CASE ID
WHEN 'org.eclipse.jdt.ui.rename.compilationunit' THEN 'org.eclipse.jdt.ui.rename.class'
WHEN 'org.eclipse.jdt.ui.rename.type' THEN 'org.eclipse.jdt.ui.rename.class'
ELSE ID END);

.;

