--This file is licensed under the University of Illinois/NCSA Open Source License. See LICENSE.TXT for details.

\p Computing the number of invocations of each kind of refactoring per user.

DROP TABLE "PUBLIC"."PER_USERNAME" IF EXISTS;

CREATE TABLE "PUBLIC"."PER_USERNAME" (

  "USERNAME" VARCHAR(20),

  "ECLIPSE_PERFORMED_COUNT" INT,

  "CODINGTRACKER_PERFORMED_COUNT" INT,

  "CODINGTRACKER_UNDONE_COUNT" INT,

  "CODINGTRACKER_REDONE_COUNT" INT,

  "CODINGSPECTATOR_INVOKED_COUNT" INT,

  "CODINGSPECTATOR_PERFORMED_COUNT" INT,

  "CODINGSPECTATOR_CANCELED_COUNT" INT,

  "CODINGSPECTATOR_UNAVAILABLE_COUNT" INT,

  "INVOKED_BY_QUICKASSIST_COUNT" INT,

  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT" INT,

  "WORKSPACE_ID_COUNT" INT,

  "NAVIGATION_HISTORY_COUNT" INT,

  "PREVIEW_COUNT" INT,

  "AVG_CONFIGURATION_DURATION_IN_MILLI_SEC" BIGINT,

  "OK_STATUS_COUNT" INT,

  "WARNING_STATUS_COUNT" INT,

  "ERROR_STATUS_COUNT" INT,

  "FATALERROR_STATUS_COUNT" INT,

  "OTHER_STATUS_COUNT" INT,

  "EMPTY_STATUS_COUNT" INT,

  "PERFORMED_WARNING_STATUS_COUNT" INT,

  "PERFORMED_ERROR_STATUS_COUNT" INT

);

INSERT INTO "PUBLIC"."PER_USERNAME" (

  "USERNAME",

  "ECLIPSE_PERFORMED_COUNT",

  "CODINGTRACKER_PERFORMED_COUNT",

  "CODINGTRACKER_UNDONE_COUNT",

  "CODINGTRACKER_REDONE_COUNT",

  "CODINGSPECTATOR_INVOKED_COUNT",

  "CODINGSPECTATOR_PERFORMED_COUNT",

  "CODINGSPECTATOR_CANCELED_COUNT",

  "CODINGSPECTATOR_UNAVAILABLE_COUNT",

  "INVOKED_BY_QUICKASSIST_COUNT",

  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",

  "WORKSPACE_ID_COUNT",

  "NAVIGATION_HISTORY_COUNT",

  "PREVIEW_COUNT",

  "AVG_CONFIGURATION_DURATION_IN_MILLI_SEC",

  "OK_STATUS_COUNT",

  "WARNING_STATUS_COUNT",

  "ERROR_STATUS_COUNT",

  "FATALERROR_STATUS_COUNT",

  "OTHER_STATUS_COUNT",

  "EMPTY_STATUS_COUNT",

  "PERFORMED_WARNING_STATUS_COUNT",

  "PERFORMED_ERROR_STATUS_COUNT"

) SELECT

"PUBLIC"."ALL_DATA"."username" AS "USERNAME",
COUNT(NULLIF(IS_ECLIPSE_PERFORMED("PUBLIC"."ALL_DATA"."recorder",
"PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "ECLIPSE_PERFORMED_COUNT",

COUNT(NULLIF(IS_CODINGTRACKER_PERFORMED("PUBLIC"."ALL_DATA"."recorder",
"PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS
"CODINGTRACKER_PERFORMED_COUNT",

COUNT(NULLIF(IS_CODINGTRACKER_UNDONE("PUBLIC"."ALL_DATA"."recorder",
"PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS
"CODINGTRACKER_UNDONE_COUNT",

COUNT(NULLIF(IS_CODINGTRACKER_REDONE("PUBLIC"."ALL_DATA"."recorder",
"PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS
"CODINGTRACKER_REDONE_COUNT",

COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED("PUBLIC"."ALL_DATA"."recorder",
"PUBLIC"."ALL_DATA"."refactoring kind") OR
IS_CODINGSPECTATOR_CANCELED("PUBLIC"."ALL_DATA"."recorder",
"PUBLIC"."ALL_DATA"."refactoring kind") OR
IS_CODINGSPECTATOR_UNAVAILABLE("PUBLIC"."ALL_DATA"."recorder",
"PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS
"CODINGSPECTATOR_INVOKED_COUNT",

COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED("PUBLIC"."ALL_DATA"."recorder",
"PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS
"CODINGSPECTATOR_PERFORMED_COUNT",

COUNT(NULLIF(IS_CODINGSPECTATOR_CANCELED("PUBLIC"."ALL_DATA"."recorder",
"PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS
"CODINGSPECTATOR_CANCELED_COUNT",

COUNT(NULLIF(IS_CODINGSPECTATOR_UNAVAILABLE("PUBLIC"."ALL_DATA"."recorder",
"PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS
"CODINGSPECTATOR_UNAVAILABLE_COUNT",

COUNT(NULLIF("PUBLIC"."ALL_DATA"."invoked-by-quickassist" <> 'true', TRUE)) AS
"INVOKED_BY_QUICKASSIST_COUNT",

COUNT(NULLIF("PUBLIC"."ALL_DATA"."invoked-through-structured-selection" <>
'true', TRUE)) AS "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",

COUNT(DISTINCT("PUBLIC"."ALL_DATA"."workspace ID")) AS "WORKSPACE_ID_COUNT",

COUNT(NULLIF("PUBLIC"."ALL_DATA"."navigation-history", '')) AS
"NAVIGATION_HISTORY_COUNT",

COUNT(NULLIF("PUBLIC"."ALL_DATA"."navigation-history" NOT LIKE '%Previe%w%',
TRUE)) AS "PREVIEW_COUNT",

AVG(CASE WHEN "PUBLIC"."ALL_DATA"."navigation duration" = '' THEN NULL ELSE
CAST("PUBLIC"."ALL_DATA"."navigation duration" AS BIGINT) END) AS
"AVG_CONFIGURATION_DURATION_IN_MILLI_SEC",

COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_OK%' THEN 1 ELSE NULL END)
AS "OK_STATUS_COUNT",

COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_WARNING%' THEN 1 ELSE NULL
END) AS "WARNING_STATUS_COUNT",

COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_ERROR%' THEN 1 ELSE NULL
END) AS "ERROR_STATUS_COUNT",

COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_FATALERROR%' THEN 1 ELSE
NULL END) AS "FATALERROR_STATUS_COUNT",

COUNT(CASE "PUBLIC"."ALL_DATA"."status"

  WHEN LIKE '_OK%' THEN NULL

  WHEN LIKE '_WARNING%' THEN NULL

  WHEN LIKE '_ERROR%' THEN NULL

  WHEN LIKE '_FATALERROR%' THEN NULL

  WHEN LIKE '' THEN NULL

  ELSE 1 END) AS "OTHER_STATUS_COUNT",

COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN '' THEN 1 ELSE NULL END) AS
"EMPTY_STATUS_COUNT",

COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED_WARNING_STATUS("PUBLIC"."ALL_DATA"."recorder",
"PUBLIC"."ALL_DATA"."refactoring kind", "PUBLIC"."ALL_DATA"."status"), FALSE))
AS "PERFORMED_WARNING_STATUS_COUNT",

COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED_ERROR_STATUS("PUBLIC"."ALL_DATA"."recorder",
"PUBLIC"."ALL_DATA"."refactoring kind", "PUBLIC"."ALL_DATA"."status"), FALSE))
AS "PERFORMED_ERROR_STATUS_COUNT"

FROM "PUBLIC"."ALL_DATA"

WHERE "PUBLIC"."ALL_DATA"."username" LIKE 'cs-___'

GROUP BY "PUBLIC"."ALL_DATA"."username" 

ORDER BY "PUBLIC"."ALL_DATA"."username"; 

* *DSV_COL_DELIM =,

* *DSV_ROW_DELIM =\n

* *DSV_TARGET_FILE =PerUsername.csv

\x SELECT * FROM "PUBLIC"."PER_USERNAME"

