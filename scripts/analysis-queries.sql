--Compute the number of each kind of refactoring invocation per refactoring ID for all users.
DROP TABLE "PUBLIC"."PER_REFACTORING_ID" IF EXISTS;

CREATE TABLE "PUBLIC"."PER_REFACTORING_ID" (
  "REFACTORING_ID" VARCHAR(1000),
  "ECLIPSE_COUNT" INT,
  "PERFORMED_COUNT" INT,
  "CANCELLED_COUNT" INT,
  "UNAVAILABLE_COUNT" INT,
  "INVOKED_BY_QUICKASSIST_COUNT" VARCHAR(20),
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT" VARCHAR(20)
);

INSERT INTO "PUBLIC"."PER_REFACTORING_ID" (
  "REFACTORING_ID",
  "ECLIPSE_COUNT",
  "PERFORMED_COUNT",
  "CANCELLED_COUNT",
  "UNAVAILABLE_COUNT",
  "INVOKED_BY_QUICKASSIST_COUNT",
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT"
)
SELECT
"PUBLIC"."ALL_DATA"."id" AS "REFACTORING_ID",
COUNT(CASE "PUBLIC"."ALL_DATA"."refactoring kind" WHEN 'ECLIPSE' THEN 1 ELSE NULL END) AS "ECLIPSE_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."refactoring kind" WHEN 'PERFORMED' THEN 1 ELSE NULL END) AS "PERFORMED_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."refactoring kind" WHEN 'CANCELLED' THEN 1 ELSE NULL END) AS "CANCELLED_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."refactoring kind" WHEN 'UNAVAILABLE' THEN 1 ELSE NULL END) AS "UNAVAILABLE_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."invoked-by-quickassist" WHEN 'true' THEN 1 ELSE NULL END) AS "INVOKED_BY_QUICKASSIST_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."invoked-through-structured-selection" WHEN 'true' THEN 1 ELSE NULL END) AS "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT"
FROM "PUBLIC"."ALL_DATA"
WHERE "PUBLIC"."ALL_DATA"."id" <> ''
GROUP BY "PUBLIC"."ALL_DATA"."id" 
ORDER BY "PUBLIC"."ALL_DATA"."id"; 

* *DSV_TARGET_FILE=PerRefactoringID.csv

\x "PUBLIC"."PER_REFACTORING_ID"

--Compute the number of each kind of refactoring invocation per user.
DROP TABLE "PUBLIC"."PER_USERNAME" IF EXISTS;

CREATE TABLE "PUBLIC"."PER_USERNAME" (
  "USERNAME" VARCHAR(20),
  "ECLIPSE_COUNT" INT,
  "PERFORMED_COUNT" INT,
  "CANCELLED_COUNT" INT,
  "UNAVAILABLE_COUNT" INT,
  "INVOKED_BY_QUICKASSIST_COUNT" VARCHAR(20),
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT" VARCHAR(20)
);

INSERT INTO "PUBLIC"."PER_USERNAME" (
  "USERNAME",
  "ECLIPSE_COUNT",
  "PERFORMED_COUNT",
  "CANCELLED_COUNT",
  "UNAVAILABLE_COUNT",
  "INVOKED_BY_QUICKASSIST_COUNT",
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT"
)
SELECT
"PUBLIC"."ALL_DATA"."username" AS "USERNAME",
COUNT(CASE "PUBLIC"."ALL_DATA"."refactoring kind" WHEN 'ECLIPSE' THEN 1 ELSE NULL END) AS "ECLIPSE_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."refactoring kind" WHEN 'PERFORMED' THEN 1 ELSE NULL END) AS "PERFORMED_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."refactoring kind" WHEN 'CANCELLED' THEN 1 ELSE NULL END) AS "CANCELLED_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."refactoring kind" WHEN 'UNAVAILABLE' THEN 1 ELSE NULL END) AS "UNAVAILABLE_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."invoked-by-quickassist" WHEN 'true' THEN 1 ELSE NULL END) AS "INVOKED_BY_QUICKASSIST_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."invoked-through-structured-selection" WHEN 'true' THEN 1 ELSE NULL END) AS "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT"
FROM "PUBLIC"."ALL_DATA"
GROUP BY "PUBLIC"."ALL_DATA"."username" 
ORDER BY "PUBLIC"."ALL_DATA"."username"; 

* *DSV_TARGET_FILE=PerUsername.csv

\x "PUBLIC"."PER_USERNAME"

--Compute the number of different kinds of status for every pair of refactoring ID and refactoring invocation kind.
DROP TABLE "PUBLIC"."PER_REFACTORING_ID_KIND" IF EXISTS;

CREATE TABLE "PUBLIC"."PER_REFACTORING_ID_KIND" (
  "REFACTORING_ID" VARCHAR(1000),
  "REFACTORING_KIND" VARCHAR(50),
  "OK_STATUS_COUNT" INT,
  "WARNING_STATUS_COUNT" INT,
  "ERROR_STATUS_COUNT" INT,
  "FATALERROR_STATUS_COUNT" INT,
  "OTHER_STATUS_COUNT" INT,
  "EMPTY_STATUS_COUNT" INT,
  "INVOKED_BY_QUICKASSIST_COUNT" VARCHAR(20),
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT" VARCHAR(20)
);

INSERT INTO "PUBLIC"."PER_REFACTORING_ID_KIND" (
  "REFACTORING_ID",
  "REFACTORING_KIND",
  "OK_STATUS_COUNT",
  "WARNING_STATUS_COUNT",
  "ERROR_STATUS_COUNT",
  "FATALERROR_STATUS_COUNT",
  "OTHER_STATUS_COUNT",
  "EMPTY_STATUS_COUNT",
  "INVOKED_BY_QUICKASSIST_COUNT",
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT"
)
SELECT
"PUBLIC"."ALL_DATA"."id" AS "REFACTORING_ID",
"PUBLIC"."ALL_DATA"."refactoring kind" AS "REFACTORING_KIND",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_OK%' THEN 1 ELSE NULL END) AS "OK_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_WARNING%' THEN 1 ELSE NULL END) AS "WARNING_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_ERROR%' THEN 1 ELSE NULL END) AS "ERROR_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_FATALERROR%' THEN 1 ELSE NULL END) AS "FATALERROR_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status"
  WHEN LIKE '_OK%' THEN NULL
  WHEN LIKE '_WARNING%' THEN NULL
  WHEN LIKE '_ERROR%' THEN NULL
  WHEN LIKE '_FATALERROR%' THEN NULL
  WHEN LIKE '' THEN NULL
  ELSE 1 END) AS "OTHER_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN '' THEN 1 ELSE NULL END) AS "EMPTY_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."invoked-by-quickassist" WHEN 'true' THEN 1 ELSE NULL END) AS "INVOKED_BY_QUICKASSIST_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."invoked-through-structured-selection" WHEN 'true' THEN 1 ELSE NULL END) AS "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT"
FROM "PUBLIC"."ALL_DATA"
WHERE "PUBLIC"."ALL_DATA"."id" <> ''
GROUP BY "PUBLIC"."ALL_DATA"."id", "PUBLIC"."ALL_DATA"."refactoring kind" 
ORDER BY "PUBLIC"."ALL_DATA"."id", "PUBLIC"."ALL_DATA"."refactoring kind";

* *DSV_TARGET_FILE=PerRefactoringIDKind.csv

\x "PUBLIC"."PER_REFACTORING_ID_KIND"

