--Compute the number of each kind of refactoring invocation per refactoring ID for all users.
\.

DROP FUNCTION IS_ECLIPSE_PERFORMED IF EXISTS;
CREATE FUNCTION IS_ECLIPSE_PERFORMED(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'ECLIPSE' AND KIND = 'PERFORMED'

DROP FUNCTION IS_CODINGTRACKER_PERFORMED IF EXISTS;
CREATE FUNCTION IS_CODINGTRACKER_PERFORMED(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGTRACKER' AND KIND = 'PERFORMED'

DROP FUNCTION IS_CODINGTRACKER_UNDONE IF EXISTS;
CREATE FUNCTION IS_CODINGTRACKER_UNDONE(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGTRACKER' AND KIND = 'UNDONE'

DROP FUNCTION IS_CODINGTRACKER_REDONE IF EXISTS;
CREATE FUNCTION IS_CODINGTRACKER_REDONE(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGTRACKER' AND KIND = 'REDONE'

DROP FUNCTION IS_CODINGSPECTATOR_PERFORMED IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_PERFORMED(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGSPECTATOR' AND KIND = 'PERFORMED'

DROP FUNCTION IS_CODINGSPECTATOR_CANCELLED IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_CANCELLED(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGSPECTATOR' AND KIND = 'CANCELLED'

DROP FUNCTION IS_CODINGSPECTATOR_UNAVAILABLE IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_UNAVAILABLE(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGSPECTATOR' AND KIND = 'UNAVAILABLE'

.;

* *DSV_COL_SPLITTER = ,
* *DSV_TARGET_TABLE = "PUBLIC"."UDC_DATA"

DROP TABLE "PUBLIC"."UDC_DATA" IF EXISTS;

CREATE TABLE "PUBLIC"."UDC_DATA" (
"YEARMONTH" VARCHAR(1000),
"COMMAND" VARCHAR(1000),
"BUNDLEID" VARCHAR(1000),
"BUNDLEVERSION" VARCHAR(1000),
"EXECUTECOUNT" INT,
"USERCOUNT" INT
);

\m commands.csv

DROP TABLE "PUBLIC"."PER_REFACTORING_ID" IF EXISTS;

CREATE TABLE "PUBLIC"."PER_REFACTORING_ID" (
  "REFACTORING_ID" VARCHAR(1000),
  "ECLIPSE_PERFORMED_COUNT" INT,
  "UDC_PERFORMED_COUNT" INT,
  "CODINGTRACKER_PERFORMED_COUNT" INT,
  "CODINGTRACKER_UNDONE_COUNT" INT,
  "CODINGTRACKER_REDONE_COUNT" INT,
  "CODINGSPECTATOR_PERFORMED_COUNT" INT,
  "CODINGSPECTATOR_CANCELLED_COUNT" INT,
  "CODINGSPECTATOR_UNAVAILABLE_COUNT" INT,
  "INVOKED_BY_QUICKASSIST_COUNT" INT,
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT" INT,
  "PREVIEW_COUNT" INT,
  "AVG_CONFIGURATION_DURATION_IN_MILLISEC" BIGINT
);

INSERT INTO "PUBLIC"."PER_REFACTORING_ID" (
  "REFACTORING_ID",
  "ECLIPSE_PERFORMED_COUNT",
  "UDC_PERFORMED_COUNT",
  "CODINGTRACKER_PERFORMED_COUNT",
  "CODINGTRACKER_UNDONE_COUNT",
  "CODINGTRACKER_REDONE_COUNT",
  "CODINGSPECTATOR_PERFORMED_COUNT",
  "CODINGSPECTATOR_CANCELLED_COUNT",
  "CODINGSPECTATOR_UNAVAILABLE_COUNT",
  "INVOKED_BY_QUICKASSIST_COUNT",
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",
  "PREVIEW_COUNT",
  "AVG_CONFIGURATION_DURATION_IN_MILLISEC"
)
SELECT
"PUBLIC"."ALL_DATA"."id" AS "REFACTORING_ID",
COUNT(NULLIF(IS_ECLIPSE_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "ECLIPSE_PERFORMED_COUNT",
(SELECT SUM("PUBLIC"."UDC_DATA"."EXECUTECOUNT") FROM "PUBLIC"."UDC_DATA" WHERE REPLACE("PUBLIC"."UDC_DATA"."COMMAND", 'edit.text.java.', '') = "PUBLIC"."ALL_DATA"."id" GROUP BY "PUBLIC"."UDC_DATA"."COMMAND") AS "UDC_PERFORMED_COUNT",
COUNT(NULLIF(IS_CODINGTRACKER_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGTRACKER_PERFORMED_COUNT",
COUNT(NULLIF(IS_CODINGTRACKER_UNDONE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGTRACKER_UNDONE_COUNT",
COUNT(NULLIF(IS_CODINGTRACKER_REDONE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGTRACKER_REDONE_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGSPECTATOR_PERFORMED_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_CANCELLED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGSPECTATOR_CANCELLED_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_UNAVAILABLE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGSPECTATOR_UNAVAILABLE_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."invoked-by-quickassist" <> 'true', TRUE)) AS "INVOKED_BY_QUICKASSIST_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."invoked-through-structured-selection" <> 'true', TRUE)) AS "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."navigation-history" NOT LIKE '%Previe%w%', TRUE)) AS "PREVIEW_COUNT",
AVG(
  CASE
  WHEN "PUBLIC"."ALL_DATA"."navigation duration" = '' THEN
    NULL
  ELSE
    CAST("PUBLIC"."ALL_DATA"."navigation duration" AS BIGINT)
  END
) AS "AVG_CONFIGURATION_DURATION_IN_MILLI_SEC"
FROM "PUBLIC"."ALL_DATA"
WHERE "PUBLIC"."ALL_DATA"."id" <> ''
GROUP BY "PUBLIC"."ALL_DATA"."id" 
ORDER BY "PUBLIC"."ALL_DATA"."id"; 

* *DSV_TARGET_FILE=PerRefactoringID.csv

\x "PUBLIC"."PER_REFACTORING_ID"

--Compute the number of each kind of refactoring invocation per user.
DROP TABLE "PUBLIC"."PER_USERNAME" IF EXISTS;

CREATE TABLE "PUBLIC"."PER_USERNAME" (
  "USERNAME" VARCHAR(20),
  "ECLIPSE_PERFORMED_COUNT" INT,
  "CODINGTRACKER_PERFORMED_COUNT" INT,
  "CODINGTRACKER_UNDONE_COUNT" INT,
  "CODINGTRACKER_REDONE_COUNT" INT,
  "CODINGSPECTATOR_PERFORMED_COUNT" INT,
  "CODINGSPECTATOR_CANCELLED_COUNT" INT,
  "CODINGSPECTATOR_UNAVAILABLE_COUNT" INT,
  "INVOKED_BY_QUICKASSIST_COUNT" INT,
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT" INT,
  "WORKSPACE_ID_COUNT" INT,
  "PREVIEW_COUNT" INT,
  "AVG_CONFIGURATION_DURATION_IN_MILLISEC" BIGINT
);

INSERT INTO "PUBLIC"."PER_USERNAME" (
  "USERNAME",
  "ECLIPSE_PERFORMED_COUNT",
  "CODINGTRACKER_PERFORMED_COUNT",
  "CODINGTRACKER_UNDONE_COUNT",
  "CODINGTRACKER_REDONE_COUNT",
  "CODINGSPECTATOR_PERFORMED_COUNT",
  "CODINGSPECTATOR_CANCELLED_COUNT",
  "CODINGSPECTATOR_UNAVAILABLE_COUNT",
  "INVOKED_BY_QUICKASSIST_COUNT",
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",
  "WORKSPACE_ID_COUNT",
  "PREVIEW_COUNT",
  "AVG_CONFIGURATION_DURATION_IN_MILLISEC"
)
SELECT
"PUBLIC"."ALL_DATA"."username" AS "USERNAME",
COUNT(NULLIF(IS_ECLIPSE_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "ECLIPSE_PERFORMED_COUNT",
COUNT(NULLIF(IS_CODINGTRACKER_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGTRACKER_PERFORMED_COUNT",
COUNT(NULLIF(IS_CODINGTRACKER_UNDONE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGTRACKER_UNDONE_COUNT",
COUNT(NULLIF(IS_CODINGTRACKER_REDONE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGTRACKER_REDONE_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGSPECTATOR_PERFORMED_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_CANCELLED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGSPECTATOR_CANCELLED_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_UNAVAILABLE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGSPECTATOR_UNAVAILABLE_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."invoked-by-quickassist" <> 'true', TRUE)) AS "INVOKED_BY_QUICKASSIST_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."invoked-through-structured-selection" <> 'true', TRUE)) AS "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",
COUNT(DISTINCT("PUBLIC"."ALL_DATA"."workspace ID")) AS "WORKSPACE_ID_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."navigation-history" NOT LIKE '%Previe%w%', TRUE)) AS "PREVIEW_COUNT",
AVG(CASE WHEN "PUBLIC"."ALL_DATA"."navigation duration" = '' THEN NULL ELSE CAST("PUBLIC"."ALL_DATA"."navigation duration" AS BIGINT) END) AS "AVG_CONFIGURATION_DURATION_IN_MILLI_SEC"
FROM "PUBLIC"."ALL_DATA"
GROUP BY "PUBLIC"."ALL_DATA"."username" 
ORDER BY "PUBLIC"."ALL_DATA"."username"; 

* *DSV_TARGET_FILE=PerUsername.csv

\x "PUBLIC"."PER_USERNAME"

--Compute the number of different kinds of status for every pair of refactoring ID and refactoring invocation kind.
DROP TABLE "PUBLIC"."PER_REFACTORING_ID_KIND" IF EXISTS;

CREATE TABLE "PUBLIC"."PER_REFACTORING_ID_KIND" (
  "REFACTORING_ID" VARCHAR(1000),
  "RECORDER" VARCHAR(100),
  "REFACTORING_KIND" VARCHAR(100),
  "OK_STATUS_COUNT" INT,
  "WARNING_STATUS_COUNT" INT,
  "ERROR_STATUS_COUNT" INT,
  "FATALERROR_STATUS_COUNT" INT,
  "OTHER_STATUS_COUNT" INT,
  "EMPTY_STATUS_COUNT" INT,
  "INVOKED_BY_QUICKASSIST_COUNT" INT,
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT" INT,
  "PREVIEW_COUNT" INT,
  "AVG_CONFIGURATION_DURATION_IN_MILLISEC" BIGINT
);

INSERT INTO "PUBLIC"."PER_REFACTORING_ID_KIND" (
  "REFACTORING_ID",
  "RECORDER",
  "REFACTORING_KIND",
  "OK_STATUS_COUNT",
  "WARNING_STATUS_COUNT",
  "ERROR_STATUS_COUNT",
  "FATALERROR_STATUS_COUNT",
  "OTHER_STATUS_COUNT",
  "EMPTY_STATUS_COUNT",
  "INVOKED_BY_QUICKASSIST_COUNT",
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",
  "PREVIEW_COUNT",
  "AVG_CONFIGURATION_DURATION_IN_MILLISEC"
)
SELECT
"PUBLIC"."ALL_DATA"."id" AS "REFACTORING_ID",
"PUBLIC"."ALL_DATA"."recorder" AS "RECORDER",
"PUBLIC"."ALL_DATA"."refactoring kind" AS "REFACTORING_KIND",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_OK%' THEN 1 ELSE NULL END) AS "OK_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_WARNING%' THEN 1 ELSE NULL END) AS "WARNING_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_ERROR%' THEN 1 ELSE NULL END) AS "ERROR_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_FATALERROR%' THEN 1 ELSE NULL END) AS "FATALERROR_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status"
  WHEN LIKE '_OK%' THEN NULL
  WHEN LIKE '_WARNING%' THEN NULL
  WHEN LIKE '_ERROR%' THEN NULL
  WHEN LIKE '_FATALERROR%' THEN NULL
  WHEN LIKE '' THEN NULL
  ELSE 1 END) AS "OTHER_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN '' THEN 1 ELSE NULL END) AS "EMPTY_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."invoked-by-quickassist" WHEN 'true' THEN 1 ELSE NULL END) AS "INVOKED_BY_QUICKASSIST_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."invoked-through-structured-selection" WHEN 'true' THEN 1 ELSE NULL END) AS "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."navigation-history" WHEN LIKE '%Previe%w%' THEN 1 ELSE NULL END) AS "PREVIEW_COUNT",
AVG(CASE WHEN "PUBLIC"."ALL_DATA"."navigation duration" = '' THEN NULL ELSE CAST("PUBLIC"."ALL_DATA"."navigation duration" AS BIGINT) END) AS "AVG_CONFIGURATION_DURATION_IN_MILLI_SEC"
FROM "PUBLIC"."ALL_DATA"
WHERE "PUBLIC"."ALL_DATA"."id" <> ''
GROUP BY "PUBLIC"."ALL_DATA"."id", "PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind" 
ORDER BY "PUBLIC"."ALL_DATA"."id", "PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind";

* *DSV_TARGET_FILE=PerRefactoringIDKind.csv

\x "PUBLIC"."PER_REFACTORING_ID_KIND"
