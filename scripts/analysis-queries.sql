--This file is licensed under the University of Illinois/NCSA Open Source License. See LICENSE.TXT for details.

--Compute the number of each kind of refactoring invocation per refactoring ID for all users.

/*
The following sections contain the functions that we are using. We are using a
SqlTool specific feature: Raw Mode
<http://hsqldb.org/doc/guide/ch08.html#raw-section>. The symbols "\." and ".;"
begin and end Raw Mode respectively.

Some of the sections are split artificially because SqlTool seems to have
problems with large amount of text in a single Raw Mode entry so we split the
text up.
*/

\.

DROP FUNCTION IS_ECLIPSE_PERFORMED IF EXISTS;
CREATE FUNCTION IS_ECLIPSE_PERFORMED(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'ECLIPSE' AND KIND = 'PERFORMED';
.;

\.

DROP FUNCTION IS_CODINGSPECTATOR_PERFORMED_WARNING_STATUS IF EXISTS;
DROP FUNCTION IS_CODINGSPECTATOR_PERFORMED_ERROR_STATUS IF EXISTS;
DROP FUNCTION IS_CODINGTRACKER_PERFORMED IF EXISTS;
CREATE FUNCTION IS_CODINGTRACKER_PERFORMED(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGTRACKER' AND KIND = 'PERFORMED';

DROP FUNCTION IS_CODINGTRACKER_UNDONE IF EXISTS;
CREATE FUNCTION IS_CODINGTRACKER_UNDONE(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGTRACKER' AND KIND = 'UNDONE';

DROP FUNCTION IS_CODINGTRACKER_REDONE IF EXISTS;
CREATE FUNCTION IS_CODINGTRACKER_REDONE(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGTRACKER' AND KIND = 'REDONE';
.;

\.

DROP FUNCTION IS_CODINGSPECTATOR_PERFORMED IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_PERFORMED(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGSPECTATOR' AND KIND = 'PERFORMED';

DROP FUNCTION IS_CODINGSPECTATOR_CANCELLED IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_CANCELLED(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGSPECTATOR' AND KIND = 'CANCELLED';

DROP FUNCTION IS_CODINGSPECTATOR_UNAVAILABLE IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_UNAVAILABLE(RECORDER VARCHAR(100), KIND VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN RECORDER = 'CODINGSPECTATOR' AND KIND = 'UNAVAILABLE';
.;

\.

DROP FUNCTION IS_CODINGSPECTATOR_PERFORMED_WARNING_STATUS IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_PERFORMED_WARNING_STATUS(RECORDER VARCHAR(100), KIND VARCHAR(100), STATUS VARCHAR(100000))
RETURNS BOOLEAN
CONTAINS SQL
RETURN IS_CODINGSPECTATOR_PERFORMED(RECORDER, KIND) AND STATUS LIKE '_WARNING%';

DROP FUNCTION IS_CODINGSPECTATOR_PERFORMED_ERROR_STATUS IF EXISTS;
CREATE FUNCTION IS_CODINGSPECTATOR_PERFORMED_ERROR_STATUS(RECORDER VARCHAR(100), KIND VARCHAR(100), STATUS VARCHAR(100000))
RETURNS BOOLEAN
CONTAINS SQL
RETURN IS_CODINGSPECTATOR_PERFORMED(RECORDER, KIND) AND STATUS LIKE '_ERROR%';
.;

\.

DROP FUNCTION IS_JAVA_REFACTORING IF EXISTS;
CREATE FUNCTION IS_JAVA_REFACTORING(ID VARCHAR(100))
RETURNS BOOLEAN
CONTAINS SQL
RETURN ID <> 'org.eclipse.jdt.ui.copy' AND ID <> 'org.eclipse.jdt.ui.delete' AND ID LIKE '%jdt%';

DROP FUNCTION JAVA_REFACTORING_ID IF EXISTS;
CREATE FUNCTION JAVA_REFACTORING_ID(ID VARCHAR(100))
RETURNS VARCHAR(100)
CONTAINS SQL
RETURN
(CASE ID
WHEN 'org.eclipse.jdt.ui.rename.compilationunit' THEN 'org.eclipse.jdt.ui.rename.class'
WHEN 'org.eclipse.jdt.ui.rename.type' THEN 'org.eclipse.jdt.ui.rename.class'
ELSE ID END);

.;

DROP TABLE "PUBLIC"."UDC_DATA" IF EXISTS;

CREATE TABLE "PUBLIC"."UDC_DATA" (
  "YEARMONTH" VARCHAR(1000),
  "COMMAND" VARCHAR(1000),
  "BUNDLEID" VARCHAR(1000),
  "BUNDLEVERSION" VARCHAR(1000),
  "EXECUTECOUNT" INT,
  "USERCOUNT" INT
);

* *DSV_COL_SPLITTER = ,
* *DSV_TARGET_TABLE = "PUBLIC"."UDC_DATA"

\m commands.csv

DROP TABLE "PUBLIC"."REFACTORING_CHANGE_SIZE" IF EXISTS;

CREATE TABLE "PUBLIC"."REFACTORING_CHANGE_SIZE" (
  "USERNAME" VARCHAR(100),
  "WORKSPACE_ID" VARCHAR(100000),
  "VERSION" VARCHAR(100),
  "TIMESTAMP" BIGINT,
  "REFACTORING_ID" VARCHAR(100),
  "AFFECTED_FILES_COUNT" INT,
  "AFFECTED_LINES_COUNT" INT
);

* *DSV_TARGET_TABLE = "PUBLIC"."REFACTORING_CHANGE_SIZE"

\m refactoring_change_intensity.csv

\p Extracting the size of Java refactorings

DROP TABLE "PUBLIC"."JAVA_REFACTORING_CHANGE_SIZE" IF EXISTS;

CREATE TABLE "PUBLIC"."JAVA_REFACTORING_CHANGE_SIZE" (
  "WORKSPACE_ID" VARCHAR(100),
  "TIMESTAMP" BIGINT,
  "REFACTORING_ID" VARCHAR(100),
  "AFFECTED_FILES_COUNT" INT,
  "AFFECTED_LINES_COUNT" INT
);

INSERT INTO "PUBLIC"."JAVA_REFACTORING_CHANGE_SIZE" (
  "WORKSPACE_ID",
  "TIMESTAMP",
  "REFACTORING_ID",
  "AFFECTED_FILES_COUNT",
  "AFFECTED_LINES_COUNT"
)
SELECT
"T"."WORKSPACE_ID" AS "WORKSPACE_ID",
"T"."TIMESTAMP" AS "TIMESTAMP",
JAVA_REFACTORING_ID("T"."REFACTORING_ID") AS "REFACTORING_ID",
"T"."AFFECTED_FILES_COUNT" AS "AFFECTED_FILES_COUNT",
"T"."AFFECTED_LINES_COUNT" AS "AFFECTED_LINES_COUNT"
FROM "PUBLIC"."REFACTORING_CHANGE_SIZE" "T"
WHERE IS_JAVA_REFACTORING("REFACTORING_ID");

* *DSV_COL_DELIM = ,
* *DSV_ROW_DELIM = \n
* *DSV_TARGET_FILE=JavaRefactoringChangeSize.csv

\x "PUBLIC"."JAVA_REFACTORING_CHANGE_SIZE"

\p Extracting the configuration time of Java refactorings

DROP TABLE "PUBLIC"."JAVA_REFACTORING_CONFIGURATION_TIME" IF EXISTS;

CREATE TABLE "PUBLIC"."JAVA_REFACTORING_CONFIGURATION_TIME" (
  "USERNAME" VARCHAR(100),
  "WORKSPACE_ID" VARCHAR(100),
  "TIMESTAMP" BIGINT,
  "REFACTORING_ID" VARCHAR(100),
  "CONFIGURATION_TIME_IN_MILLI_SEC" VARCHAR(100)
);

INSERT INTO "PUBLIC"."JAVA_REFACTORING_CONFIGURATION_TIME" (
  "USERNAME",
  "WORKSPACE_ID",
  "TIMESTAMP",
  "REFACTORING_ID",
  "CONFIGURATION_TIME_IN_MILLI_SEC"
)
SELECT
"T"."username" AS "USERNAME",
"T"."workspace ID" AS "WORKSPACE_ID",
"T"."timestamp" AS "TIMESTAMP",
JAVA_REFACTORING_ID("T"."id") AS "REFACTORING_ID",
"T"."navigation duration" AS "CONFIGURATION_TIME_IN_MILLI_SEC"
FROM "PUBLIC"."ALL_DATA" "T"
WHERE IS_JAVA_REFACTORING("T"."id") AND IS_CODINGSPECTATOR_PERFORMED("T"."recorder", "T"."refactoring kind") AND "T"."navigation duration" <> '';

* *DSV_COL_DELIM = ,
* *DSV_ROW_DELIM = \n
* *DSV_TARGET_FILE=JavaRefactoringConfigurationTime.csv

\x "PUBLIC"."JAVA_REFACTORING_CONFIGURATION_TIME"

* *DSV_COL_DELIM = ,
* *DSV_ROW_DELIM = \n
* *DSV_TARGET_FILE=ChangeSizePerRefactoringID.csv

\x SELECT "PUBLIC"."REFACTORING_CHANGE_SIZE"."REFACTORING_ID" AS "REFACTORING_ID", COUNT("PUBLIC"."REFACTORING_CHANGE_SIZE"."USERNAME") AS "INVOCATION_COUNT", AVG(CONVERT("PUBLIC"."REFACTORING_CHANGE_SIZE"."AFFECTED_FILES_COUNT",SQL_FLOAT)) AS "AVG_AFFECTED_FILES_FLOAT", AVG(CONVERT("PUBLIC"."REFACTORING_CHANGE_SIZE"."AFFECTED_LINES_COUNT",SQL_FLOAT)) AS "AVG_AFFECTED_LINES_FLOAT", AVG("PUBLIC"."REFACTORING_CHANGE_SIZE"."AFFECTED_FILES_COUNT") AS "AVG_AFFECTED_FILES_INT", AVG("PUBLIC"."REFACTORING_CHANGE_SIZE"."AFFECTED_LINES_COUNT") AS "AVG_AFFECTED_LINES_INT", SUM("PUBLIC"."REFACTORING_CHANGE_SIZE"."AFFECTED_FILES_COUNT") AS "SUM_AFFECTED_FILES", SUM("PUBLIC"."REFACTORING_CHANGE_SIZE"."AFFECTED_LINES_COUNT") AS "SUM_AFFECTED_LINES" FROM "PUBLIC"."REFACTORING_CHANGE_SIZE" WHERE IS_JAVA_REFACTORING("PUBLIC"."REFACTORING_CHANGE_SIZE"."REFACTORING_ID") GROUP BY "PUBLIC"."REFACTORING_CHANGE_SIZE"."REFACTORING_ID" ORDER BY "PUBLIC"."REFACTORING_CHANGE_SIZE"."REFACTORING_ID";

* *DSV_COL_DELIM = ,
* *DSV_ROW_DELIM = \n
* *DSV_TARGET_FILE=CountPerChangeSize.csv

\x SELECT "PUBLIC"."REFACTORING_CHANGE_SIZE"."AFFECTED_FILES_COUNT" AS "AFFECTED_FILES_COUNT", "PUBLIC"."REFACTORING_CHANGE_SIZE"."AFFECTED_LINES_COUNT" AS "L", COUNT(*) AS "MULTIPLICITY" FROM "PUBLIC"."REFACTORING_CHANGE_SIZE" WHERE IS_JAVA_REFACTORING("PUBLIC"."REFACTORING_CHANGE_SIZE"."REFACTORING_ID") GROUP BY "PUBLIC"."REFACTORING_CHANGE_SIZE"."AFFECTED_FILES_COUNT", "PUBLIC"."REFACTORING_CHANGE_SIZE"."AFFECTED_LINES_COUNT";

-- List the affected number of lines and files and configuration time of every refactoring.
-- Use the script refactoring-size-configuration-analysis.sql to combine the configuration data and refactoring size data

-- DROP TABLE "PUBLIC"."CHANGE_CONFIGURATION_COUNT" IF EXISTS;
-- 
-- CREATE TABLE "PUBLIC"."CHANGE_CONFIGURATION_COUNT" (
--   "AFFECTED_FILES_COUNT" INT,
--   "AFFECTED_LINES_COUNT" INT,
--   "CONFIGURATION_TIME_IN_MILLI_SEC" VARCHAR(100),
--   "MULTIPLICITY" INT
-- );
-- 
-- INSERT INTO "PUBLIC"."CHANGE_CONFIGURATION_COUNT" (
--   "AFFECTED_FILES_COUNT",
--   "AFFECTED_LINES_COUNT",
--   "CONFIGURATION_TIME_IN_MILLI_SEC",
--   "MULTIPLICITY"
-- )
-- SELECT
-- "T1"."AFFECTED_FILES_COUNT" AS "AFFECTED_FILES_COUNT",
-- "T1"."AFFECTED_LINES_COUNT" AS "AFFECTED_LINES_COUNT",
-- (SELECT "T2"."navigation duration" AS "NAVIGATION_DURATION"
--  FROM "PUBLIC"."ALL_DATA" "T2"
--  WHERE 
--        "T2"."workspace ID" = "T1"."WORKSPACE_ID" AND
--        "T2"."recorder" = 'CODINGSPECTATOR' AND
--        ABS("T2"."timestamp" - "T1"."TIMESTAMP") < 1000 AND
--        (CASE "T2"."id"
--         WHEN 'org.eclipse.jdt.ui.rename.compilationunit' THEN 'org.eclipse.jdt.ui.rename.class'
--         WHEN 'org.eclipse.jdt.ui.rename.type' THEN 'org.eclipse.jdt.ui.rename.class'
--         ELSE "T2"."id" END) = 
--        (CASE "T1"."REFACTORING_ID"
--         WHEN 'org.eclipse.jdt.ui.rename.compilationunit' THEN 'org.eclipse.jdt.ui.rename.class'
--         WHEN 'org.eclipse.jdt.ui.rename.type' THEN 'org.eclipse.jdt.ui.rename.class'
--         ELSE "T1"."REFACTORING_ID" END)
-- ) AS "CONFIGURATION_TIME_IN_MILLI_SEC",
-- COUNT(*) AS "MULTIPLICITY"
-- FROM "PUBLIC"."REFACTORING_CHANGE_SIZE" "T1"
-- WHERE IS_JAVA_REFACTORING("T1"."REFACTORING_ID")
-- GROUP BY "AFFECTED_FILES_COUNT", "AFFECTED_LINES_COUNT", "CONFIGURATION_TIME_IN_MILLI_SEC";
-- 
-- * *DSV_COL_DELIM = ,
-- * *DSV_ROW_DELIM = \n
-- * *DSV_TARGET_FILE=ChangeConfigurationCount.csv
-- 
-- \x "PUBLIC"."CHANGE_CONFIGURATION_COUNT"

* *DSV_COL_DELIM = ,
* *DSV_ROW_DELIM = \n
* *DSV_TARGET_FILE=InvocationCountsPerRefactoringIDForChangeSize.csv

\x SELECT CASE "PUBLIC"."REFACTORING_CHANGE_SIZE"."REFACTORING_ID" WHEN 'org.eclipse.jdt.ui.rename.compilationunit' THEN  'org.eclipse.jdt.ui.rename.class' WHEN 'org.eclipse.jdt.ui.rename.type' THEN 'org.eclipse.jdt.ui.rename.class' ELSE "PUBLIC"."REFACTORING_CHANGE_SIZE"."REFACTORING_ID" END AS "REFACTORING_ID", COUNT(*) AS "C" FROM "PUBLIC"."REFACTORING_CHANGE_SIZE" WHERE IS_JAVA_REFACTORING("PUBLIC"."REFACTORING_CHANGE_SIZE"."REFACTORING_ID") GROUP BY CASE "PUBLIC"."REFACTORING_CHANGE_SIZE"."REFACTORING_ID" WHEN 'org.eclipse.jdt.ui.rename.compilationunit' THEN  'org.eclipse.jdt.ui.rename.class' WHEN 'org.eclipse.jdt.ui.rename.type' THEN 'org.eclipse.jdt.ui.rename.class' ELSE "PUBLIC"."REFACTORING_CHANGE_SIZE"."REFACTORING_ID" END ORDER BY CASE "PUBLIC"."REFACTORING_CHANGE_SIZE"."REFACTORING_ID" WHEN 'org.eclipse.jdt.ui.rename.compilationunit' THEN  'org.eclipse.jdt.ui.rename.class' WHEN 'org.eclipse.jdt.ui.rename.type' THEN 'org.eclipse.jdt.ui.rename.class' ELSE "PUBLIC"."REFACTORING_CHANGE_SIZE"."REFACTORING_ID" END;

* *DSV_TARGET_TABLE = "PUBLIC"."UDC_ECLIPSE_MAPPING"

DROP TABLE "PUBLIC"."UDC_ECLIPSE_MAPPING" IF EXISTS;

CREATE TABLE "PUBLIC"."UDC_ECLIPSE_MAPPING" (
"UDCID" VARCHAR(1000),
"ECLIPSEID" VARCHAR(1000)
);

\m refactoringmapping.csv

-- Insert some "pseudo" IDs that correspond with the UDC umbrella IDs for refactorings

INSERT INTO "PUBLIC"."ALL_DATA" ("id")
VALUES ('org.eclipse.jdt.ui.rename.all');

INSERT INTO "PUBLIC"."ALL_DATA" ("id")
VALUES ('org.eclipse.jdt.ui.move.all');

INSERT INTO "PUBLIC"."ALL_DATA" ("id")
VALUES ('org.eclipse.jdt.ui.inline.all');

DROP TABLE "PUBLIC"."PER_REFACTORING_ID" IF EXISTS;

CREATE TABLE "PUBLIC"."PER_REFACTORING_ID" (
  "REFACTORING_ID" VARCHAR(1000),
  "ECLIPSE_PERFORMED_COUNT" INT,
  "UDC_PERFORMED_COUNT" INT,
  "CODINGTRACKER_PERFORMED_COUNT" INT,
  "CODINGTRACKER_UNDONE_COUNT" INT,
  "CODINGTRACKER_REDONE_COUNT" INT,
  "CODINGSPECTATOR_PERFORMED_COUNT" INT,
  "CODINGSPECTATOR_CANCELLED_COUNT" INT,
  "CODINGSPECTATOR_UNAVAILABLE_COUNT" INT,
  "INVOKED_BY_QUICKASSIST_COUNT" INT,
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT" INT,
  "NAVIGATION_HISTORY_COUNT" INT,
  "PREVIEW_COUNT" INT,
  "CODINGSPECTATOR_PERFORMED_WITH_CONFIGURATION_COUNT" INT,
  "CODINGSPECTATOR_CANCELLED_WITH_CONFIGURATION_COUNT" INT,
  "CODINGSPECTATOR_PERFORMED_OR_CANCELLED_WITH_CONFIGURATION_COUNT" INT,
  "AVG_PERFORMED_CONFIGURATION_DURATION_IN_MILLI_SEC" BIGINT,
  "AVG_CANCELLED_CONFIGURATION_DURATION_IN_MILLI_SEC" BIGINT,
  "AVG_PERFORMED_OR_CANCELLED_CONFIGURATION_DURATION_IN_MILLI_SEC" BIGINT,
  "OK_STATUS_COUNT" INT,
  "WARNING_STATUS_COUNT" INT,
  "ERROR_STATUS_COUNT" INT,
  "FATALERROR_STATUS_COUNT" INT,
  "OTHER_STATUS_COUNT" INT,
  "EMPTY_STATUS_COUNT" INT,
  "PERFORMED_WARNING_STATUS_COUNT" INT,
  "PERFORMED_ERROR_STATUS_COUNT" INT,
   -- Probabilities based on CodingTracker
  "P_UNDONE_GIVEN_PERFORMED" NUMERIC(3,2),
   -- Probabilities based on CodingSpectator
  "P_PERFORMED_GIVEN_WARNING_STATUS" NUMERIC(3,2),
  "P_PERFORMED_GIVEN_ERROR_STATUS" NUMERIC(3,2),
  "P_PERFORMED_GIVEN_WARNING_OR_ERROR_STATUS" NUMERIC(3,2)
);

INSERT INTO "PUBLIC"."PER_REFACTORING_ID" (
  "REFACTORING_ID",
  "ECLIPSE_PERFORMED_COUNT",
  "UDC_PERFORMED_COUNT",
  "CODINGTRACKER_PERFORMED_COUNT",
  "CODINGTRACKER_UNDONE_COUNT",
  "CODINGTRACKER_REDONE_COUNT",
  "CODINGSPECTATOR_PERFORMED_COUNT",
  "CODINGSPECTATOR_CANCELLED_COUNT",
  "CODINGSPECTATOR_UNAVAILABLE_COUNT",
  "INVOKED_BY_QUICKASSIST_COUNT",
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",
  "NAVIGATION_HISTORY_COUNT",
  "PREVIEW_COUNT",
  "CODINGSPECTATOR_PERFORMED_WITH_CONFIGURATION_COUNT",
  "CODINGSPECTATOR_CANCELLED_WITH_CONFIGURATION_COUNT",
  "CODINGSPECTATOR_PERFORMED_OR_CANCELLED_WITH_CONFIGURATION_COUNT",
  "AVG_PERFORMED_CONFIGURATION_DURATION_IN_MILLI_SEC",
  "AVG_CANCELLED_CONFIGURATION_DURATION_IN_MILLI_SEC",
  "AVG_PERFORMED_OR_CANCELLED_CONFIGURATION_DURATION_IN_MILLI_SEC",
  "OK_STATUS_COUNT",
  "WARNING_STATUS_COUNT",
  "ERROR_STATUS_COUNT",
  "FATALERROR_STATUS_COUNT",
  "OTHER_STATUS_COUNT",
  "EMPTY_STATUS_COUNT",
  "PERFORMED_WARNING_STATUS_COUNT",
  "PERFORMED_ERROR_STATUS_COUNT",
  "P_UNDONE_GIVEN_PERFORMED",
  "P_PERFORMED_GIVEN_WARNING_STATUS",
  "P_PERFORMED_GIVEN_ERROR_STATUS",
  "P_PERFORMED_GIVEN_WARNING_OR_ERROR_STATUS"
)
SELECT
"PUBLIC"."ALL_DATA"."id" AS "REFACTORING_ID",
COUNT(NULLIF(IS_ECLIPSE_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "ECLIPSE_PERFORMED_COUNT",
(SELECT SUM("PUBLIC"."UDC_DATA"."EXECUTECOUNT") FROM "PUBLIC"."UDC_DATA" WHERE "PUBLIC"."UDC_DATA"."COMMAND" = (SELECT "PUBLIC"."UDC_ECLIPSE_MAPPING"."UDCID" FROM "PUBLIC"."UDC_ECLIPSE_MAPPING" WHERE "PUBLIC"."UDC_ECLIPSE_MAPPING"."ECLIPSEID" = "PUBLIC"."ALL_DATA"."id") GROUP BY "PUBLIC"."UDC_DATA"."COMMAND") AS "UDC_PERFORMED_COUNT",
COUNT(NULLIF(IS_CODINGTRACKER_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGTRACKER_PERFORMED_COUNT",
COUNT(NULLIF(IS_CODINGTRACKER_UNDONE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGTRACKER_UNDONE_COUNT",
COUNT(NULLIF(IS_CODINGTRACKER_REDONE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGTRACKER_REDONE_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGSPECTATOR_PERFORMED_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_CANCELLED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGSPECTATOR_CANCELLED_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_UNAVAILABLE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGSPECTATOR_UNAVAILABLE_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."invoked-by-quickassist" <> 'true', TRUE)) AS "INVOKED_BY_QUICKASSIST_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."invoked-through-structured-selection" <> 'true', TRUE)) AS "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."navigation-history", '')) AS "NAVIGATION_HISTORY_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."navigation-history" NOT LIKE '%Previe%w%', TRUE)) AS "PREVIEW_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."recorder" = 'CODINGSPECTATOR' AND "PUBLIC"."ALL_DATA"."refactoring kind" = 'PERFORMED' AND "PUBLIC"."ALL_DATA"."navigation duration" <> '', FALSE)) AS "CODINGSPECTATOR_PERFORMED_WITH_CONFIGURATION_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."recorder" = 'CODINGSPECTATOR' AND "PUBLIC"."ALL_DATA"."refactoring kind" = 'CANCELLED' AND "PUBLIC"."ALL_DATA"."navigation duration" <> '', FALSE)) AS "CODINGSPECTATOR_CANCELLEDED_WITH_CONFIGURATION_COUNT",
COUNT(NULLIF(("PUBLIC"."ALL_DATA"."recorder" = 'CODINGSPECTATOR' AND "PUBLIC"."ALL_DATA"."refactoring kind" = 'PERFORMED' AND "PUBLIC"."ALL_DATA"."navigation duration" <> '') OR ("PUBLIC"."ALL_DATA"."recorder" = 'CODINGSPECTATOR' AND "PUBLIC"."ALL_DATA"."refactoring kind" = 'CANCELLED' AND "PUBLIC"."ALL_DATA"."navigation duration" <> ''), FALSE)) AS "CODINGSPECTATOR_PERFORMED_OR_CANCELLED_WITH_CONFIGURATION_COUNT",
AVG(
  CASE
  WHEN NOT ("PUBLIC"."ALL_DATA"."recorder" = 'CODINGSPECTATOR' AND "PUBLIC"."ALL_DATA"."refactoring kind" = 'PERFORMED' AND "PUBLIC"."ALL_DATA"."navigation duration" <> '') THEN
    NULL
  ELSE
    CAST("PUBLIC"."ALL_DATA"."navigation duration" AS BIGINT)
  END
) AS "AVG_PERFORMED_CONFIGURATION_DURATION_IN_MILLI_SEC",
AVG(
  CASE
  WHEN NOT ("PUBLIC"."ALL_DATA"."recorder" = 'CODINGSPECTATOR' AND "PUBLIC"."ALL_DATA"."refactoring kind" = 'CANCELLED' AND "PUBLIC"."ALL_DATA"."navigation duration" <> '') THEN
    NULL
  ELSE
    CAST("PUBLIC"."ALL_DATA"."navigation duration" AS BIGINT)
  END
) AS "AVG_CANCELLED_CONFIGURATION_DURATION_IN_MILLI_SEC",
AVG(
  CASE
  WHEN NOT (("PUBLIC"."ALL_DATA"."recorder" = 'CODINGSPECTATOR' AND "PUBLIC"."ALL_DATA"."refactoring kind" = 'PERFORMED' AND "PUBLIC"."ALL_DATA"."navigation duration" <> '') OR ("PUBLIC"."ALL_DATA"."recorder" = 'CODINGSPECTATOR' AND "PUBLIC"."ALL_DATA"."refactoring kind" = 'CANCELLED' AND "PUBLIC"."ALL_DATA"."navigation duration" <> '')) THEN
    NULL
  ELSE
    CAST("PUBLIC"."ALL_DATA"."navigation duration" AS BIGINT)
  END
) AS "AVG_PERFORMED_OR_CANCELLED_CONFIGURATION_DURATION_IN_MILLI_SEC",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_OK%' THEN 1 ELSE NULL END) AS "OK_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_WARNING%' THEN 1 ELSE NULL END) AS "WARNING_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_ERROR%' THEN 1 ELSE NULL END) AS "ERROR_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_FATALERROR%' THEN 1 ELSE NULL END) AS "FATALERROR_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status"
  WHEN LIKE '_OK%' THEN NULL
  WHEN LIKE '_WARNING%' THEN NULL
  WHEN LIKE '_ERROR%' THEN NULL
  WHEN LIKE '_FATALERROR%' THEN NULL
  WHEN LIKE '' THEN NULL
  ELSE 1 END) AS "OTHER_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN '' THEN 1 ELSE NULL END) AS "EMPTY_STATUS_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED_WARNING_STATUS("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind", "PUBLIC"."ALL_DATA"."status"), FALSE)) AS "PERFORMED_WARNING_STATUS_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED_ERROR_STATUS("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind", "PUBLIC"."ALL_DATA"."status"), FALSE)) AS "PERFORMED_ERROR_STATUS_COUNT",

CASE COUNT(NULLIF(IS_CODINGTRACKER_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE))
WHEN 0 THEN NULL
ELSE
CAST(COUNT(NULLIF(IS_CODINGTRACKER_UNDONE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS REAL) / COUNT(NULLIF(IS_CODINGTRACKER_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE))
END AS "P_UNDONE_GIVEN_PERFORMED",

CASE COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_WARNING%' THEN 1 ELSE NULL END)
WHEN 0 THEN NULL
ELSE CAST(COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED_WARNING_STATUS("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind", "PUBLIC"."ALL_DATA"."status"), FALSE)) AS REAL) / COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_WARNING%' THEN 1 ELSE NULL END)
END AS "P_PERFORMED_GIVEN_WARNING_STATUS",

CASE COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_ERROR%' THEN 1 ELSE NULL END)
WHEN 0 THEN NULL
ELSE CAST(COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED_ERROR_STATUS("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind", "PUBLIC"."ALL_DATA"."status"), FALSE)) AS REAL) / COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_ERROR%' THEN 1 ELSE NULL END)
END AS "P_PERFORMED_GIVEN_ERROR_STATUS",

CASE COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_WARNING%' THEN 1 WHEN LIKE '_ERROR%' THEN 1 ELSE NULL END)
WHEN 0 THEN NULL
ELSE CAST(COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED_WARNING_STATUS("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind", "PUBLIC"."ALL_DATA"."status") OR IS_CODINGSPECTATOR_PERFORMED_ERROR_STATUS("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind", "PUBLIC"."ALL_DATA"."status"), FALSE)) AS REAL) / COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_WARNING%' THEN 1 WHEN LIKE '_ERROR%' THEN 1 ELSE NULL END)
END AS "P_PERFORMED_GIVEN_WARNING_OR_ERROR_STATUS"

FROM "PUBLIC"."ALL_DATA"
WHERE IS_JAVA_REFACTORING("PUBLIC"."ALL_DATA"."id") AND "PUBLIC"."ALL_DATA"."username" LIKE 'cs-___'
GROUP BY "PUBLIC"."ALL_DATA"."id" 
ORDER BY "PUBLIC"."ALL_DATA"."id"; 

* *DSV_COL_DELIM=,
* *DSV_TARGET_FILE=PerRefactoringID.csv

\x "PUBLIC"."PER_REFACTORING_ID"

--Compute the number of each kind of refactoring invocation per user.
DROP TABLE "PUBLIC"."PER_USERNAME" IF EXISTS;

CREATE TABLE "PUBLIC"."PER_USERNAME" (
  "USERNAME" VARCHAR(20),
  "ECLIPSE_PERFORMED_COUNT" INT,
  "CODINGTRACKER_PERFORMED_COUNT" INT,
  "CODINGTRACKER_UNDONE_COUNT" INT,
  "CODINGTRACKER_REDONE_COUNT" INT,
  "CODINGSPECTATOR_PERFORMED_COUNT" INT,
  "CODINGSPECTATOR_CANCELLED_COUNT" INT,
  "CODINGSPECTATOR_UNAVAILABLE_COUNT" INT,
  "INVOKED_BY_QUICKASSIST_COUNT" INT,
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT" INT,
  "WORKSPACE_ID_COUNT" INT,
  "NAVIGATION_HISTORY_COUNT" INT,
  "PREVIEW_COUNT" INT,
  "AVG_CONFIGURATION_DURATION_IN_MILLI_SEC" BIGINT,
  "OK_STATUS_COUNT" INT,
  "WARNING_STATUS_COUNT" INT,
  "ERROR_STATUS_COUNT" INT,
  "FATALERROR_STATUS_COUNT" INT,
  "OTHER_STATUS_COUNT" INT,
  "EMPTY_STATUS_COUNT" INT,
  "PERFORMED_WARNING_STATUS_COUNT" INT,
  "PERFORMED_ERROR_STATUS_COUNT" INT
);

INSERT INTO "PUBLIC"."PER_USERNAME" (
  "USERNAME",
  "ECLIPSE_PERFORMED_COUNT",
  "CODINGTRACKER_PERFORMED_COUNT",
  "CODINGTRACKER_UNDONE_COUNT",
  "CODINGTRACKER_REDONE_COUNT",
  "CODINGSPECTATOR_PERFORMED_COUNT",
  "CODINGSPECTATOR_CANCELLED_COUNT",
  "CODINGSPECTATOR_UNAVAILABLE_COUNT",
  "INVOKED_BY_QUICKASSIST_COUNT",
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",
  "WORKSPACE_ID_COUNT",
  "NAVIGATION_HISTORY_COUNT",
  "PREVIEW_COUNT",
  "AVG_CONFIGURATION_DURATION_IN_MILLI_SEC",
  "OK_STATUS_COUNT",
  "WARNING_STATUS_COUNT",
  "ERROR_STATUS_COUNT",
  "FATALERROR_STATUS_COUNT",
  "OTHER_STATUS_COUNT",
  "EMPTY_STATUS_COUNT",
  "PERFORMED_WARNING_STATUS_COUNT",
  "PERFORMED_ERROR_STATUS_COUNT"
)
SELECT
"PUBLIC"."ALL_DATA"."username" AS "USERNAME",
COUNT(NULLIF(IS_ECLIPSE_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "ECLIPSE_PERFORMED_COUNT",
COUNT(NULLIF(IS_CODINGTRACKER_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGTRACKER_PERFORMED_COUNT",
COUNT(NULLIF(IS_CODINGTRACKER_UNDONE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGTRACKER_UNDONE_COUNT",
COUNT(NULLIF(IS_CODINGTRACKER_REDONE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGTRACKER_REDONE_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGSPECTATOR_PERFORMED_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_CANCELLED("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGSPECTATOR_CANCELLED_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_UNAVAILABLE("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind"), FALSE)) AS "CODINGSPECTATOR_UNAVAILABLE_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."invoked-by-quickassist" <> 'true', TRUE)) AS "INVOKED_BY_QUICKASSIST_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."invoked-through-structured-selection" <> 'true', TRUE)) AS "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",
COUNT(DISTINCT("PUBLIC"."ALL_DATA"."workspace ID")) AS "WORKSPACE_ID_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."navigation-history", '')) AS "NAVIGATION_HISTORY_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."navigation-history" NOT LIKE '%Previe%w%', TRUE)) AS "PREVIEW_COUNT",
AVG(CASE WHEN "PUBLIC"."ALL_DATA"."navigation duration" = '' THEN NULL ELSE CAST("PUBLIC"."ALL_DATA"."navigation duration" AS BIGINT) END) AS "AVG_CONFIGURATION_DURATION_IN_MILLI_SEC",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_OK%' THEN 1 ELSE NULL END) AS "OK_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_WARNING%' THEN 1 ELSE NULL END) AS "WARNING_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_ERROR%' THEN 1 ELSE NULL END) AS "ERROR_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_FATALERROR%' THEN 1 ELSE NULL END) AS "FATALERROR_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status"
  WHEN LIKE '_OK%' THEN NULL
  WHEN LIKE '_WARNING%' THEN NULL
  WHEN LIKE '_ERROR%' THEN NULL
  WHEN LIKE '_FATALERROR%' THEN NULL
  WHEN LIKE '' THEN NULL
  ELSE 1 END) AS "OTHER_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN '' THEN 1 ELSE NULL END) AS "EMPTY_STATUS_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED_WARNING_STATUS("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind", "PUBLIC"."ALL_DATA"."status"), FALSE)) AS "PERFORMED_WARNING_STATUS_COUNT",
COUNT(NULLIF(IS_CODINGSPECTATOR_PERFORMED_ERROR_STATUS("PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind", "PUBLIC"."ALL_DATA"."status"), FALSE)) AS "PERFORMED_ERROR_STATUS_COUNT"
FROM "PUBLIC"."ALL_DATA"
WHERE "PUBLIC"."ALL_DATA"."username" LIKE 'cs-___'
GROUP BY "PUBLIC"."ALL_DATA"."username" 
ORDER BY "PUBLIC"."ALL_DATA"."username"; 

* *DSV_COL_DELIM=,
* *DSV_TARGET_FILE=PerUsername.csv

\x "PUBLIC"."PER_USERNAME"

--Compute the number of different kinds of status for every pair of refactoring ID and refactoring invocation kind.
DROP TABLE "PUBLIC"."PER_REFACTORING_ID_KIND" IF EXISTS;

CREATE TABLE "PUBLIC"."PER_REFACTORING_ID_KIND" (
  "REFACTORING_ID" VARCHAR(1000),
  "RECORDER" VARCHAR(100),
  "REFACTORING_KIND" VARCHAR(100),
  "OK_STATUS_COUNT" INT,
  "WARNING_STATUS_COUNT" INT,
  "ERROR_STATUS_COUNT" INT,
  "FATALERROR_STATUS_COUNT" INT,
  "OTHER_STATUS_COUNT" INT,
  "EMPTY_STATUS_COUNT" INT,
  "INVOKED_BY_QUICKASSIST_COUNT" INT,
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT" INT,
  "NAVIGATION_HISTORY_COUNT" INT,
  "PREVIEW_COUNT" INT,
  "AVG_CONFIGURATION_DURATION_IN_MILLI_SEC" BIGINT
);

INSERT INTO "PUBLIC"."PER_REFACTORING_ID_KIND" (
  "REFACTORING_ID",
  "RECORDER",
  "REFACTORING_KIND",
  "OK_STATUS_COUNT",
  "WARNING_STATUS_COUNT",
  "ERROR_STATUS_COUNT",
  "FATALERROR_STATUS_COUNT",
  "OTHER_STATUS_COUNT",
  "EMPTY_STATUS_COUNT",
  "INVOKED_BY_QUICKASSIST_COUNT",
  "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",
  "NAVIGATION_HISTORY_COUNT",
  "PREVIEW_COUNT",
  "AVG_CONFIGURATION_DURATION_IN_MILLI_SEC"
)
SELECT
"PUBLIC"."ALL_DATA"."id" AS "REFACTORING_ID",
"PUBLIC"."ALL_DATA"."recorder" AS "RECORDER",
"PUBLIC"."ALL_DATA"."refactoring kind" AS "REFACTORING_KIND",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_OK%' THEN 1 ELSE NULL END) AS "OK_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_WARNING%' THEN 1 ELSE NULL END) AS "WARNING_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_ERROR%' THEN 1 ELSE NULL END) AS "ERROR_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN LIKE '_FATALERROR%' THEN 1 ELSE NULL END) AS "FATALERROR_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status"
  WHEN LIKE '_OK%' THEN NULL
  WHEN LIKE '_WARNING%' THEN NULL
  WHEN LIKE '_ERROR%' THEN NULL
  WHEN LIKE '_FATALERROR%' THEN NULL
  WHEN LIKE '' THEN NULL
  ELSE 1 END) AS "OTHER_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."status" WHEN '' THEN 1 ELSE NULL END) AS "EMPTY_STATUS_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."invoked-by-quickassist" WHEN 'true' THEN 1 ELSE NULL END) AS "INVOKED_BY_QUICKASSIST_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."invoked-through-structured-selection" WHEN 'true' THEN 1 ELSE NULL END) AS "INVOKED_THROUGH_STRUCTURED_SELECTION_COUNT",
COUNT(NULLIF("PUBLIC"."ALL_DATA"."navigation-history", '')) AS "NAVIGATION_HISTORY_COUNT",
COUNT(CASE "PUBLIC"."ALL_DATA"."navigation-history" WHEN LIKE '%Previe%w%' THEN 1 ELSE NULL END) AS "PREVIEW_COUNT",
AVG(CASE WHEN "PUBLIC"."ALL_DATA"."navigation duration" = '' THEN NULL ELSE CAST("PUBLIC"."ALL_DATA"."navigation duration" AS BIGINT) END) AS "AVG_CONFIGURATION_DURATION_IN_MILLI_SEC"
FROM "PUBLIC"."ALL_DATA"
WHERE IS_JAVA_REFACTORING("PUBLIC"."ALL_DATA"."id") AND "PUBLIC"."ALL_DATA"."username" LIKE 'cs-___'
GROUP BY "PUBLIC"."ALL_DATA"."id", "PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind" 
ORDER BY "PUBLIC"."ALL_DATA"."id", "PUBLIC"."ALL_DATA"."recorder", "PUBLIC"."ALL_DATA"."refactoring kind";

* *DSV_COL_DELIM=,
* *DSV_TARGET_FILE=PerRefactoringIDKind.csv

\x "PUBLIC"."PER_REFACTORING_ID_KIND"

